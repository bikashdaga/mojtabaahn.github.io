{
    "componentChunkName": "component---src-pages-blog-item-js",
    "path": "/02-mocking-sdks-in-python",
    "result": {"data":{"markdownRemark":{"frontmatter":{"title":"Mocking SDKs in Python"},"html":"<p>HELLO. In this article I'm gonna talk about testing in Python. specifically mocking SDKs.</p>\n<h3>Scenario</h3>\n<p>Let's imagine we have a web application that is responsible of managing user basket in a microservice architecture and we name it <em>Basket Microservice</em>.\nWe also have another microservice that is responsible for payment and financial operations and we name it <em>Payment Microservice</em>.\nAnd our <em>Basket Microservice</em> communicates with <em>Payment Microservice</em> using a <em>Software Development Kit</em> (SDK).</p>\n<div class='w-full bg-gray-100 rounded-lg p-10 flex flex-col justify-between items-center'>\n    <div class=\"w-full px-8 h-32 rounded bg-red-500 text-white flex items-center justify-center font-bold\">Basket Microservice</div>\n    <div class=\"px-8 h-16 rounded bg-black -mt-4 text-white flex items-center justify-center font-bold animate-bounce\">Payment SDK</div>\n    <div class=\"w-full mt-8 px-8 h-32 rounded bg-red-500 text-white flex items-center justify-center font-bold\">Payment Microservice</div>\n</div>\n<p>Now let's imagine we have an endpoint that is responsible to redirect user to bank gateway:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber 0\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> starlette<span class=\"token punctuation\">.</span>responses <span class=\"token keyword\">import</span> RedirectResponse\n<span class=\"token keyword\">from</span> payment_sdk <span class=\"token keyword\">import</span> payment_sdk\n<span class=\"token keyword\">from</span> basket <span class=\"token keyword\">import</span> Basket\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PurchaseBasketController</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>basket <span class=\"token punctuation\">:</span> Basket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>__basket <span class=\"token operator\">=</span> basket\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__validate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__lock</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>basket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>__validate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>__lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        url <span class=\"token operator\">=</span> payment_sdk<span class=\"token punctuation\">.</span>get_gateway_url<span class=\"token punctuation\">(</span>basket<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> RedirectResponse<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Here under the hood we're making a http request to <em>Payment Microservice</em> and  it will return a purchase url.</p>\n<h3>Testing Challenge</h3>\n<p>So we start writing some <em>HTTP Test</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber 0\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> httpx <span class=\"token keyword\">import</span> Response<span class=\"token punctuation\">,</span> Client\n<span class=\"token keyword\">from</span> app <span class=\"token keyword\">import</span> app\n<span class=\"token keyword\">from</span> factories <span class=\"token keyword\">import</span> UserFactory<span class=\"token punctuation\">,</span> BasketFactory\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_purchase_basket_controller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> Client<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span>app<span class=\"token punctuation\">,</span> base_url<span class=\"token operator\">=</span><span class=\"token string\">\"http://testserver.test\"</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client<span class=\"token punctuation\">:</span>\n        user <span class=\"token operator\">=</span> UserFactory<span class=\"token punctuation\">.</span>create_one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        basket <span class=\"token operator\">=</span> BasketFactory<span class=\"token punctuation\">.</span>create_one<span class=\"token punctuation\">(</span>user_id<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n        response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>\n            url<span class=\"token operator\">=</span><span class=\"token string\">'/basket/purchase'</span><span class=\"token punctuation\">,</span>\n            headers<span class=\"token operator\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>Accept<span class=\"token operator\">=</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">assert</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">307</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This seems legit, but this test has some serious problems:</p>\n<ul>\n<li>This test is <strong>not isolated</strong>. We're making a real http call to <em>Payment Microservice</em> to generate a purchase url.</li>\n<li>Our <em>Payment Microservice</em> is processing our inputs on a <strong>production</strong> environment and it is making a real entity. imagine running this test on every <code class=\"language-text\">ci</code> pipeline!</li>\n<li>Depending on network status this might make a <strong>long running test</strong> and in its worst it might event <strong>timeout</strong>.</li>\n</ul>\n<h3>Getting shit together</h3>\n<p>Mocking is not something new in testing concepts. but I find it miraculous. It is the savior.\nSo we know we don't want a real HTTP request to <em>Payment Microservice</em>. but how can we make it happen without editing our controller?</p>\n<p><a href=\"https://docs.python.org/3/library/unittest.mock.html#unittest.mock.MagicMock\">MagicMock</a> is python's standard way to mocking functions and methods.\nall we need to do is instantiate a <em>MagicMock</em> with a desired return value and assign it to object property we want:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber 0\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> httpx <span class=\"token keyword\">import</span> Response<span class=\"token punctuation\">,</span> Client\n<span class=\"token keyword\">from</span> app <span class=\"token keyword\">import</span> app\n<span class=\"token keyword\">from</span> factories <span class=\"token keyword\">import</span> UserFactory<span class=\"token punctuation\">,</span> BasketFactory\n<span class=\"token keyword\">from</span> unittest<span class=\"token punctuation\">.</span>mock <span class=\"token keyword\">import</span> MagicMock\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_purchase_basket_controller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    payment_sdk<span class=\"token punctuation\">.</span>get_gateway_url <span class=\"token operator\">=</span> MagicMock<span class=\"token punctuation\">(</span>return_value<span class=\"token operator\">=</span><span class=\"token string\">'https://sample_bank_url.test'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">with</span> Client<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span>app<span class=\"token punctuation\">,</span> base_url<span class=\"token operator\">=</span><span class=\"token string\">\"http://testserver.test\"</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client<span class=\"token punctuation\">:</span>\n        user <span class=\"token operator\">=</span> UserFactory<span class=\"token punctuation\">.</span>create_one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        basket <span class=\"token operator\">=</span> BasketFactory<span class=\"token punctuation\">.</span>create_one<span class=\"token punctuation\">(</span>user_id<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n        response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>\n            url<span class=\"token operator\">=</span><span class=\"token string\">'/basket/purchase'</span><span class=\"token punctuation\">,</span>\n            headers<span class=\"token operator\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>Accept<span class=\"token operator\">=</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">assert</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">307</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Hurai! Problems solved. Well Done.</strong></p>\n<p>Still, there is a small problem: we're not setting our mocked property back to its original value and it might corrupt other tests!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber 0\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> httpx <span class=\"token keyword\">import</span> Response<span class=\"token punctuation\">,</span> Client\n<span class=\"token keyword\">from</span> app <span class=\"token keyword\">import</span> app\n<span class=\"token keyword\">from</span> factories <span class=\"token keyword\">import</span> UserFactory<span class=\"token punctuation\">,</span> BasketFactory\n<span class=\"token keyword\">from</span> unittest<span class=\"token punctuation\">.</span>mock <span class=\"token keyword\">import</span> MagicMock\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_purchase_basket_controller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    get_gateway_url <span class=\"token operator\">=</span> payment_sdk<span class=\"token punctuation\">.</span>get_gateway_url\n    payment_sdk<span class=\"token punctuation\">.</span>get_gateway_url <span class=\"token operator\">=</span> MagicMock<span class=\"token punctuation\">(</span>return_value<span class=\"token operator\">=</span><span class=\"token string\">'https://sample_bank_url.test'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">with</span> Client<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span>app<span class=\"token punctuation\">,</span> base_url<span class=\"token operator\">=</span><span class=\"token string\">\"http://testserver.test\"</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client<span class=\"token punctuation\">:</span>\n        user <span class=\"token operator\">=</span> UserFactory<span class=\"token punctuation\">.</span>create_one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        basket <span class=\"token operator\">=</span> BasketFactory<span class=\"token punctuation\">.</span>create_one<span class=\"token punctuation\">(</span>user_id<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n        response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>\n            url<span class=\"token operator\">=</span><span class=\"token string\">'/basket/purchase'</span><span class=\"token punctuation\">,</span>\n            headers<span class=\"token operator\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>Accept<span class=\"token operator\">=</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">assert</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">307</span>\n\n        payment_sdk<span class=\"token punctuation\">.</span>get_gateway_url <span class=\"token operator\">=</span> get_gateway_url</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>But this seems overkill for every test we write. let's make it more fun using <a href=\"https://www.geeksforgeeks.org/context-manager-in-python/\">Context Manager</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber 0\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> httpx <span class=\"token keyword\">import</span> Response<span class=\"token punctuation\">,</span> Client\n<span class=\"token keyword\">from</span> app <span class=\"token keyword\">import</span> app\n<span class=\"token keyword\">from</span> factories <span class=\"token keyword\">import</span> UserFactory<span class=\"token punctuation\">,</span> BasketFactory\n<span class=\"token keyword\">from</span> unittest<span class=\"token punctuation\">.</span>mock <span class=\"token keyword\">import</span> MagicMock\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QuickMock</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> object_<span class=\"token punctuation\">:</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> Any<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>__object <span class=\"token operator\">=</span> object_\n        self<span class=\"token punctuation\">.</span>__prop <span class=\"token operator\">=</span> prop\n        self<span class=\"token punctuation\">.</span>__value <span class=\"token operator\">=</span> value\n        self<span class=\"token punctuation\">.</span>__original <span class=\"token operator\">=</span> object_<span class=\"token punctuation\">.</span>__getattribute__<span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>__object<span class=\"token punctuation\">.</span>__setattr__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>__prop<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>__value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exc_type<span class=\"token punctuation\">,</span> exc_value<span class=\"token punctuation\">,</span> exc_tb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>__object<span class=\"token punctuation\">.</span>__setattr__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>__prop<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>__original<span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_purchase_basket_controller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> QuickMock<span class=\"token punctuation\">(</span>payment_sdk<span class=\"token punctuation\">,</span> <span class=\"token string\">'get_gateway_url'</span><span class=\"token punctuation\">,</span> MagicMock<span class=\"token punctuation\">(</span>return_value<span class=\"token operator\">=</span><span class=\"token string\">'https://sample_bank_url.test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> Client<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span>app<span class=\"token punctuation\">,</span> base_url<span class=\"token operator\">=</span><span class=\"token string\">\"http://testserver.test\"</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client<span class=\"token punctuation\">:</span>\n            user <span class=\"token operator\">=</span> UserFactory<span class=\"token punctuation\">.</span>create_one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            basket <span class=\"token operator\">=</span> BasketFactory<span class=\"token punctuation\">.</span>create_one<span class=\"token punctuation\">(</span>user_id<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n            response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>\n                url<span class=\"token operator\">=</span><span class=\"token string\">'/basket/purchase'</span><span class=\"token punctuation\">,</span>\n                headers<span class=\"token operator\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>Accept<span class=\"token operator\">=</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">assert</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">200</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This QuickMock is a context manager, what it does is it will replace an object property with the value provided to it and before exiting it will replace the original value of property to it.</p>"}},"pageContext":{"id":"1eb87b6d-c2d9-57f9-9dfd-2140a635a9b9"}},
    "staticQueryHashes": ["3000541721"]}